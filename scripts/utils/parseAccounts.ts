/**
 * parseAccounts.ts - Hardhat Account Parser
 *
 * This script parses the output from 'npx hardhat node' command and extracts
 * account addresses and private keys to create a structured users.json file.
 * It expects 20 accounts to be generated by Hardhat's default configuration.
 */

import * as fs from "fs";

/**
 * Interface defining the structure of a single user account
 * Contains the wallet address and private key for blockchain operations
 */
interface User {
  address: string; // Ethereum wallet address (0x...)
  privateKey: string; // Private key for signing transactions (0x...)
}

/**
 * Interface defining the structure of the complete users collection
 * Maps user identifiers (user1, user2, etc.) to User objects
 */
interface Users {
  [key: string]: User; // Key-value pairs where key is user identifier and value is User object
}

// Path to the accounts.txt file generated by 'npx hardhat node'
const filePath: string = "accounts/accounts.txt";

// Check if the accounts.txt file exists before proceeding
if (!fs.existsSync(filePath)) {
  console.error(
    `Error: File ${filePath} not found. Please create it with the output of 'npx hardhat node'.`
  );
  process.exit(1);
}

// Read the entire contents of the accounts.txt file as a string
const data: string = fs.readFileSync(filePath, "utf8");

// Initialize an empty object to store parsed user data
const users: Users = {};

// Split the file content into lines and filter out empty lines
// This handles cases where there might be trailing newlines or empty lines
const lines: string[] = data.split("\n").filter((line) => line.trim() !== "");

// Counter to track the current user being processed (starts at 1 for user1, user2, etc.)
let currentUserIndex: number = 1;

// Temporary variable to store the current address while parsing
// This is needed because addresses and private keys appear on separate lines
let currentAddress: string | null = null;

// Process each line of the accounts.txt file
lines.forEach((line: string, index: number) => {
  // Regular expression to match account addresses
  // Format: "Account #0: 0x1234..." - captures the hex address
  const addressMatch: RegExpMatchArray | null = line.match(
    /Account #\d+:\s*(0x[a-fA-F0-9]{40})/
  );

  // Regular expression to match private keys
  // Format: "Private Key: 0xabcd..." - captures the hex private key
  const privateKeyMatch: RegExpMatchArray | null = line.match(
    /Private Key: (0x[a-fA-F0-9]{64})/
  );

  // If an address is found on this line, store it temporarily
  if (addressMatch) {
    currentAddress = addressMatch[1];
    console.log(`Line ${index + 1}: Found address - ${currentAddress}`);
  }

  // If a private key is found and we have a stored address, create a user entry
  // This ensures we have both address and private key before creating a user
  if (privateKeyMatch && currentAddress) {
    // Generate user key (user1, user2, user3, etc.)
    const userKey: string = `user${currentUserIndex}`;

    // Create the user object with address and private key
    users[userKey] = {
      address: currentAddress,
      privateKey: privateKeyMatch[1],
    };

    // Log the successful user creation for debugging
    console.log(
      `Line ${
        index + 1
      }: Added ${userKey} - Address: ${currentAddress}, PrivateKey: ${
        privateKeyMatch[1]
      }`
    );

    // Increment user counter and reset address for next iteration
    currentUserIndex++;
    currentAddress = null;
  }
});

// Validation check: Hardhat typically generates 20 accounts by default
// Warn if the number of parsed users doesn't match expectations
if (currentUserIndex - 1 !== 20) {
  console.warn(
    `Warning: Expected 20 users, but only ${
      currentUserIndex - 1
    } users were parsed.`
  );
}

// Display the final parsed users object in a readable format
console.log("Users:", JSON.stringify(users, null, 2));

// Write the parsed user data to a JSON file for use by other scripts
// This creates/overwrites accounts/users.json with the structured data
fs.writeFileSync("accounts/users.json", JSON.stringify(users, null, 2));

// Confirm successful file creation
console.log("Data saved to accounts/users.json");
